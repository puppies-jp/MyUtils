@startuml sample1

' クラス定義
class Hello {
    ' +public
    +hello: string 
    +countor:int
    ' -private
    -こんにちわ: string 
    ' #Protected
    #goodNight: string
    ' ~Package
    ~Package:string
    ' 関数定義
    +void method1(string arg1)
    -int method2(int arg1)
    #string method3(string arg1)
    ~int* method4(int* arg1)
}

'インターフェース定義
interface World {}

'継承(◁-)
Hello <|-- World
Class01 <|-- Class02

'コンポジット(◆-)
'集約の一種になります。コンポジットは「全体」インスタンスが
'「部分」インスタンスの生成や削除を担っている場合
'全体インスタンスが削除されると、基本的には、
'連鎖して部分インスタンスも削除される関係になります。
Class03 *-- Class04

'集約(◇-) 
'関連のあるクラス同士が、「全体」と「部分」の関係にあるとき
' [部署]◇-[社員]　みたいな、、
Class05 o-- Class06

'依存(破線) クラス間で関係性はあるが、あまり強くない関係性の場合
Class07 .. Class08
'関連(線) クラスが複数あり、それらに何かしらの関係があるとき
Class09 -- Class10

@enduml

' ----------------------------
' ダイアログの区切りは@startuml ~ @endumlの区切りでできる
' ----------------------------

@startuml sample2

class Object << general >>
Object <|--- ArrayList

' 指定したクラスに付属したノート
note top of Object : In java, every class\nextends this one.

' floating Note
note "This is a floating note" as N1

' クラスと接続したノート
note "This note is connected\nto several objects." as N2
Object .. N2
N2 .. ArrayList

' noteは直前のクラスなら指定しなくてもくっつくらしい、、
class Foo
note left: On last defined class

note right of abstract : this is abstract
note top of "abstract class" : this is abstract class

abstract        abstract
abstract class  "abstract class"
annotation      annotation
circle          circle
()              circle_short_form
class           class
diamond         diamond
<>              diamond_short_form
entity          entity
enum            enum
interface       interface
@enduml